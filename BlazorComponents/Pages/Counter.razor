@page "/counter"

<PageTitle>Counter</PageTitle>

<h1>@PageHeader</h1>

@if(pageApproved)
{
    <h2 class="text-success">This has been approved.</h2>
}
@if (pageRejected)
{
    <h2 class="text-danger">This has been rejected.</h2>
}

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@if(pageApproved == false && pageRejected == false) // Only show if no vote yet.
{
    <br /><br />
    <div class="row">
        <div class="col-12">
            <!-- put the vote buttons from Vote.razor -->
            <!-- Pass it a method, that gets called when event is triggered. -->
            <Vote onVoted="HandleOnVoted"></Vote>
             <br /><br />
             <p>Send back an event...</p>
        </div>
    </div>
}

@code {
    private int currentCount = 0;
    public string pageHeader= "Counter";

    private bool pageApproved = false;
    private bool pageRejected = false;

    // To tell it this is a parameter coming in.
    [Parameter]
    public int StartingValue { get; set; }

    [Parameter]
    public string PageHeader { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // Do whatever is needed
        currentCount = StartingValue;

        if(string.IsNullOrEmpty(PageHeader) == true)
        {
            //pageHeader = PageHeader;
            PageHeader = "Phiddle";
        }
        /*else
        {
            pageHeader = "Phiddle";
        }*/
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    // To handle the data from the Vote buttons
    private void HandleOnVoted(string result)
    {
        switch(result)
        {
            case "Approved":
                pageApproved = true;
                break;
            case "Rejected":
                pageRejected = true;
                break;
            default:
                break;
        }
    }
}
